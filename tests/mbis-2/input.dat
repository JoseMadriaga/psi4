#! MBIS calculation on OH-

charges_ref = psi4.Matrix.from_list([ #TEST
 [-1.19177658],   #TEST
 [ 0.19177652]])  #TEST

dipoles_ref = psi4.Matrix.from_list([ #TEST
 [ 1.05225512e-15, -8.02709582e-15, -1.00289562e-01],   #TEST
 [ 9.33032846e-16, -1.84806251e-15,  1.61048217e-02]])  #TEST

quadrupoles_ref = psi4.Matrix.from_list([ #TEST
 [-5.30927644e+00, -1.01355258e-15,  2.56300007e-15, -5.30927644e+00,
  -1.93100194e-15, -4.98306699e+00], #TEST
 [-5.48513278e-01,  6.44303276e-17, -1.41139499e-15, -5.48513278e-01,
  -7.83149261e-16, -5.49323087e-01]]) #TEST

octupoles_ref = psi4.Matrix.from_list([ #TEST
 [-8.05553480e-15, -1.14632220e-14, -1.94485114e-01, -2.94971385e-15,
   5.79086101e-16, -3.29212012e-15, -5.07136194e-14, -1.94485114e-01,
  -1.91664763e-14, -1.04370463e+00],  #TEST
 [ 2.99840093e-16, -2.03589512e-15, -2.03066382e-03, -5.76089198e-16,
   1.64202826e-15, -3.70229167e-15, -1.03338930e-14, -2.03066382e-03,
  -2.48840771e-15, -2.30415328e-03]]) #TEST

molecule mol {
  -1 1
  O 0.0 0.0 0.0
  H 0.0 0.0 1.0
  symmetry c1
  no_reorient
  no_com
}

set {
  scf_type df
  d_convergence 8
  e_convergence 10
}

e, wfn = energy('hf/cc-pvdz', return_wfn=True)
oeprop(wfn, 'MBIS_CHARGES', title='OH- SCF')

#NOTE: wfn.array_variable gives you flattened atomic multipole arrays; for expanded arrays, use wfn.variable
charges = wfn.array_variable('MBIS_CHARGES')
dipoles = wfn.array_variable('MBIS_DIPOLES')
quadrupoles = wfn.array_variable('MBIS_QUADRUPOLES')
octupoles = wfn.array_variable('MBIS_OCTUPOLES')

compare_matrices(charges_ref, charges, 7, "MBIS Charges")             #TEST
compare_matrices(dipoles_ref, dipoles, 7, "MBIS Dipoles")             #TEST
compare_matrices(quadrupoles_ref, quadrupoles, 7, "MBIS Quadrupoles") #TEST
compare_matrices(octupoles_ref, octupoles, 7, "MBIS Octupoles")       #TEST
